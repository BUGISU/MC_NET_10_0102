using System.Collections;
using Unity.VisualScripting;
using UnityEngine;


public class SoundManager : MonoBehaviour
{
    public static SoundManager instance { get; private set; }

    [Header("Ïò§ÎîîÏò§ ÏÜåÏä§")] [SerializeField] public AudioSource bgmSource;
    [SerializeField] private AudioSource natureSource;
    [SerializeField] private AudioSource sfxSource;
    [SerializeField] private AudioSource voiceSource;

    [Header("Î≥ºÎ•® Ï°∞Ï†à")] [Range(0f, 1f)] public float bgmVolume = 0.3f;
    [Range(0f, 1f)] public float sfxVolume = 1f;

    [Header("Audio Clip List")] public AudioClip[] bgmClips;
    public AudioClip[] sfxClips;
    public AudioClip[] narrationClips;

    public bool isPlaying = false;

    private void Awake()
    {
        if (instance == null)
        {
            instance = this;
            DontDestroyOnLoad(gameObject); // ÏµúÏ¥à ÏÉùÏÑ±Îêú Ïò§Î∏åÏ†ùÌä∏Îßå Ïú†ÏßÄÎê®
        }
        else if (instance != this)
        {
            Destroy(gameObject); // Ïù¥ÌõÑ Ïî¨ÏóêÏÑú ÏÉàÎ°ú ÏÉùÍ∏¥ Í±¥ ÌååÍ¥¥Îê®
        }

        LoadVolumeSettings();
    }

    private void Update()
    {
        if (bgmSource != null)
            bgmSource.volume = bgmVolume;
        if (natureSource != null)
            natureSource.volume = sfxVolume;
        
        if (sfxSource != null)
            sfxSource.volume = sfxVolume;
        if (voiceSource != null)
            voiceSource.volume = sfxVolume;
    }

    public void SaveVolumeSettings()
    {
        PlayerPrefs.SetFloat("BGM_VOLUME", bgmVolume);
        PlayerPrefs.SetFloat("SFX_VOLUME", sfxVolume);
        PlayerPrefs.Save();
    }

    public void LoadVolumeSettings()
    {
        // Í∏∞Î≥∏Í∞í ÏÑ§Ï†ï: BGM 0.5, SFX 1.0
        bgmVolume = PlayerPrefs.GetFloat("BGM_VOLUME", 0.3f);
        sfxVolume = PlayerPrefs.GetFloat("SFX_VOLUME", 1.0f);
    }

    // =============================
    // BGM Ïû¨ÏÉù
    // =============================
    public void PlayBGM(AudioClip clip)
    {
        if (clip == null)
        {
            Debug.LogWarning("[SoundManager] BGM Clip is null!");
            return;
        }

        if (bgmSource.clip == clip)
            return;

        bgmSource.clip = clip;
        bgmSource.Play();
    }

    public void PlayBGM(string clipName)
    {
        AudioClip clip = FindClipByName(bgmClips, clipName);

        if (clip != null)
        {
            PlayBGM(clip);
        }
        else
        {
            Debug.LogWarning($"[SoundManager] BGM Clip '{clipName}' not found!");
        }
    }

    // =============================
// ÏûêÏó∞ ÏÜåÎ¶¨(Nature Sound) Ïû¨ÏÉù
// =============================
    public void PlayNature(AudioClip clip, bool loop = true)
    {
        if (clip == null)
        {
            Debug.LogWarning("[SoundManager] Nature Clip is null!");
            return;
        }

        // Î£®ÌîÑ Ïó¨Î∂Ä ÏÑ§Ï†ï
        natureSource.loop = loop;

        // Í∞ôÏùÄ ÌÅ¥Î¶ΩÏù¥Î©¥ Îã§Ïãú Ïû¨ÏÉùÌïòÏßÄ ÏïäÏùå
        if (natureSource.clip == clip && natureSource.isPlaying)
            return;

        natureSource.clip = clip;
        natureSource.Play();
    }

// Ïù¥Î¶ÑÏúºÎ°ú Ïû¨ÏÉùÌïòÍ∏∞
    public void PlayNature(string clipName, bool loop = true)
    {
        AudioClip clip = FindClipByName(sfxClips, clipName); // üîπ ÏûêÏó∞ ÏÜåÎ¶¨ Ï†ÑÏö© Î∞∞Ïó¥ÏùÑ Ïì∞Î†§Î©¥ Îî∞Î°ú ÎßåÎì§Ïñ¥ÎèÑ Îê®
        if (clip != null)
        {
            PlayNature(clip, loop);
        }
        else
        {
            Debug.LogWarning($"[SoundManager] Nature Clip '{clipName}' not found!");
        }
    }

// Ï†ïÏßÄ
    public void StopNature()
    {
        if (natureSource.isPlaying)
            natureSource.Stop();
    }

    // =============================
    // SFX Ïû¨ÏÉù
    // =============================
    public void PlaySFX(AudioClip clip)
    {
        if (clip == null)
        {
            Debug.LogWarning("[SoundManager] SFX Clip is null!");
            return;
        }

        sfxSource.PlayOneShot(clip, sfxVolume);
    }

    public void PlaySFX(string clipName)
    {
        AudioClip clip = FindClipByName(sfxClips, clipName);

        if (clip != null)
        {
            PlaySFX(clip);
        }
        else
        {
            Debug.LogWarning($"[SoundManager] SFX Clip '{clipName}' not found!");
        }
    }

    private IEnumerator WaitForSFXToEnd()
    {
        // ÏÇ¨Ïö¥ÎìúÍ∞Ä Ïû¨ÏÉù Ï§ëÏù∏ ÎèôÏïà ÎåÄÍ∏∞
        yield return new WaitWhile(() => sfxSource.isPlaying);
        Debug.Log("ÏÇ¨Ïö¥Îìú Ïû¨ÏÉù ÏôÑÎ£å!");
    }

    // =============================
    // VOICE Ïû¨ÏÉù
    // =============================
    public void PlayVOICE(AudioClip clip)
    {
        if (clip == null)
        {
            Debug.LogWarning("[SoundManager] SFX Clip is null!");
            return;
        }

        voiceSource.PlayOneShot(clip, sfxVolume);
    }

    public void PlayVOICE(string clipName)
    {
        voiceSource.Stop();
        AudioClip clip = FindClipByName(narrationClips, clipName);
        if (clip != null)
        {
            PlayVOICE(clip);
        }
        else
        {
            Debug.LogWarning($"[SoundManager] VOICE Clip '{clipName}' not found!");
        }
    }

    // =============================
    // Ï†ïÏßÄ
    // =============================
    public void StopAllSound()
    {
        bgmSource.Stop();
        sfxSource.Stop();
    }

    public void StopBGM()
    {
        bgmSource.Stop();
    }

    public void StopSFX()
    {
        sfxSource.Stop();
    }

    public void StopVOICE()
    {
        voiceSource.Stop();
    }

    // =============================
    // ÌÅ¥Î¶Ω Ïù¥Î¶ÑÏúºÎ°ú Í≤ÄÏÉâ
    // =============================
    private AudioClip FindClipByName(AudioClip[] clips, string clipName)
    {
        foreach (var clip in clips)
        {
            if (clip != null && clip.name == clipName)
            {
                return clip;
            }
        }

        return null;
    }

    public AudioClip GetNarrationClipByName(string clipName)
    {
        return FindClipByName(narrationClips, clipName);
    }
}